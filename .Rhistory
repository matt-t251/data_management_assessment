sessionInfo()
# Sort the data frame by the count in descending order
df_for_scattergraph <- df_country[order(df_country$completion_percent, decreasing = TRUE), ]
# keep only the top performing country
df_for_scattergraph <- head(df_for_scattergraph, n=20)
# change country code to name
df_for_scattergraph$country <- countrycode(sourcevar = df_for_scattergraph$country, origin = "iso2c", destination = "country.name")
scatter_plot <- ggplot(df_for_scattergraph, aes(x = completion_percent, y = count, color = country)) +
geom_point() +
labs(title = "Scatter Plot of Completion Percent vs. Count",
x = "Completion Percent",
y = "Count",
color = "Country")
(scatter_plot)
df_for_scattergraph$country <- countrycode(sourcevar = df_for_scattergraph$country, origin = "iso2c", destination = "country.name")
scatter_plot <- ggplot(df_for_scattergraph, aes(x = completion_percent, y = count, color = country)) +
geom_point() +
labs(title = "Scatter Plot of Completion Percent vs. Count",
x = "Completion Percent",
y = "Count",
color = "Country")
library(tidyverse)
# install.packages("countrycode")
library(countrycode)
# Sort the data frame by the count in descending order
df_for_scattergraph <- df_country[order(df_country$completion_percent, decreasing = TRUE), ]
# keep only the top performing country
df_for_scattergraph <- head(df_for_scattergraph, n=20)
# change country code to name
df_for_scattergraph$country <- countrycode(sourcevar = df_for_scattergraph$country, origin = "iso2c", destination = "country.name")
scatter_plot <- ggplot(df_for_scattergraph, aes(x = completion_percent, y = count, color = country)) +
geom_point() +
labs(title = "Scatter Plot of Completion Percent vs. Count",
x = "Completion Percent",
y = "Count",
color = "Country")
(scatter_plot)
## INPUT: df_country (02-B.R)
## OUTPUT: graphs/PieChartofContinents.png
library('ProjectTemplate')
load.project()
# install.packages("tidyverse")
library(tidyverse)
# install.packages("countrycode")
library(countrycode)
# Sort the data frame by the count in descending order
df_for_scattergraph <- df_country[order(df_country$completion_percent, decreasing = TRUE), ]
# keep only the top performing country
df_for_scattergraph <- head(df_for_scattergraph, n=20)
# change country code to name
df_for_scattergraph$country <- countrycode(sourcevar = df_for_scattergraph$country, origin = "iso2c", destination = "country.name")
scatter_plot <- ggplot(df_for_scattergraph, aes(x = completion_percent, y = count, color = country)) +
geom_point() +
labs(title = "Scatter plot of percentage of learners who completed the course vs. total learners from a country",
x = "percentage of learners who completed the course (%)",
y = "Total Leaners from country",
color = "Country")
ggsave("H:/Documents/FutureLearn/graphs/scatter_plot_of_total_count", plot = scatter_plot, width = 6, height = 4, dpi = 300)
ggsave("H:/Documents/FutureLearn/graphs/scatter_plot_of_total_count.png", plot = scatter_plot, width = 6, height = 4, dpi = 300)
(scatter_plot)
View(df_for_scattergraph)
View(cyber.security.1_step.activity)
df_learner_steps <- rbind(cyber.security.1_step.activity,
cyber.security.2_step.activity,
cyber.security.3_step.activity,
cyber.security.4_step.activity,
cyber.security.5_step.activity,
cyber.security.6_step.activity,
cyber.security.7_step.activity)
View(df_learner_steps)
## Pre-processing script for cycle 2 (country_completion)
## output is data frame of all learner IDs with their country, detected country, enrollment date, role,
## as well as Step and step completed date.
#  INPUT: df_learners_no_duplicates
# OUTPUT: df_learners
# only 14095 users have completed a step
# took 7 minutes to process
if ( !exists("df_learners")) {
print("data frame missing")
# append the data frames
df_learner_steps <- rbind(cyber.security.1_step.activity,
cyber.security.2_step.activity,
cyber.security.3_step.activity,
cyber.security.4_step.activity,
cyber.security.5_step.activity,
cyber.security.6_step.activity,
cyber.security.7_step.activity)
# add the new columns
df_learners              <- df_learners_no_duplicates
df_learners$step         <- ""
df_learners$completed_at <- ""
for (n in 1:nrow(df_learners)) {
print(n)
# store a single user id
learner_id_char <- df_learners$learner_id[n]
# if the ID is in the data frame...
if (learner_id_char %in% df_learner_steps$learner_id) {
# Find the rows where the learner_id matches in df_learners, it will return a vector of all instances.
row_index <- which(df_learner_steps$learner_id == learner_id_char)
# store the length of the vector
vector_length <- length(row_index)
# if row index has 0 elements, then user isn't in the steps data frame
if (vector_length == 0) {
# print("no user")
}
# if row index has 1 element, then user didn't finish first step
if (vector_length == 1) {
# print("user didn't finish first step")
}
# if all the elements are empty, then they also didn't finish any steps
if (all(df_learner_steps$last_completed_at == "")) {
# print("user didn't complete any step, (but started multiple)")
break
}
# if row index has 2 or more elements, then user finished at least one step
if (vector_length >= 2) {
# print("user finished one or more steps")
i = 0
temp_bool = TRUE
# while the last cell is empty, keep looping
while (temp_bool == TRUE) {
# if cell is empty, move one up
if (df_learner_steps$last_completed_at[row_index[length(row_index) -i]] == "") {
# print("last cell empty")
i = i+1
# if every row has been checked, move to the next user
if (i == length(row_index)){
# print("all cells checks, and no date available")
temp_bool = FALSE
}
# otherwise the last step has been identified
} else {
# print("last cell has date")
# save the date to variables
date_completed <- df_learner_steps$last_completed_at[row_index[length(row_index) -i]]
step_completed <- df_learner_steps$step[row_index[length(row_index) -i]]
# store the date and the step reached on the dr_learners
df_learners$completed_at[n] <- date_completed
df_learners$step[n] <- step_completed
temp_bool = FALSE
}
}
}
}
}
cache("df_learners")
} else {
print("data frame already created.")
}
print("data frame missing")
# append the data frames
df_learner_steps <- rbind(cyber.security.1_step.activity,
cyber.security.2_step.activity,
cyber.security.3_step.activity,
cyber.security.4_step.activity,
cyber.security.5_step.activity,
cyber.security.6_step.activity,
cyber.security.7_step.activity)
# add the new columns
df_learners              <- df_learners_no_duplicates
df_learners$step         <- ""
df_learners$completed_at <- ""
for (n in 1:nrow(df_learners)) {
print(n)
# store a single user id
learner_id_char <- df_learners$learner_id[n]
# if the ID is in the data frame...
if (learner_id_char %in% df_learner_steps$learner_id) {
# Find the rows where the learner_id matches in df_learners, it will return a vector of all instances.
row_index <- which(df_learner_steps$learner_id == learner_id_char)
# store the length of the vector
vector_length <- length(row_index)
# if row index has 0 elements, then user isn't in the steps data frame
if (vector_length == 0) {
# print("no user")
}
# if row index has 1 element, then user didn't finish first step
if (vector_length == 1) {
# print("user didn't finish first step")
}
# if all the elements are empty, then they also didn't finish any steps
if (all(df_learner_steps$last_completed_at == "")) {
# print("user didn't complete any step, (but started multiple)")
break
}
# if row index has 2 or more elements, then user finished at least one step
if (vector_length >= 2) {
# print("user finished one or more steps")
i = 0
temp_bool = TRUE
# while the last cell is empty, keep looping
while (temp_bool == TRUE) {
# if cell is empty, move one up
if (df_learner_steps$last_completed_at[row_index[length(row_index) -i]] == "") {
# print("last cell empty")
i = i+1
# if every row has been checked, move to the next user
if (i == length(row_index)){
# print("all cells checks, and no date available")
temp_bool = FALSE
}
# otherwise the last step has been identified
} else {
# print("last cell has date")
# save the date to variables
date_completed <- df_learner_steps$last_completed_at[row_index[length(row_index) -i]]
step_completed <- df_learner_steps$step[row_index[length(row_index) -i]]
# store the date and the step reached on the dr_learners
df_learners$completed_at[n] <- date_completed
df_learners$step[n] <- step_completed
temp_bool = FALSE
}
}
}
}
}
View(df_learners)
View(df_learners)
View(cyber.security.2_archetype.survey.responses)
View(df_temp_learners)
temp_df = subset(df_temp_learners, step!="")
View(temp_df)
temp_df = subset(df_temp_learners, step =="3.9")
df_learner_steps <- rbind(cyber.security.1_step.activity,
cyber.security.2_step.activity,
cyber.security.3_step.activity,
cyber.security.4_step.activity,
cyber.security.5_step.activity,
cyber.security.6_step.activity,
cyber.security.7_step.activity)
# add the new columns
df_learners              <- df_learners_no_duplicates
df_learners$step         <- ""
df_learners$completed_at <- ""
for (n in 1:nrow(df_learners)) {
print(n)
# store a single user id
learner_id_char <- df_learners$learner_id[n]
# if the ID is in the data frame...
if (learner_id_char %in% df_learners$learner_id) {
# Find the rows where the learner_id matches in df_learners, it will return a vector of all instances.
row_index <- which(df_learner_steps$learner_id == learner_id_char)
# store the length of the vector
vector_length <- length(row_index)
# if row index has 0 elements, then user isn't in the steps data frame
if (vector_length == 0) {
# print("no user")
}
# if row index has 1 element, then user didn't finish first step
if (vector_length == 1) {
# print("user didn't finish first step")
}
# if all the elements are empty, then they also didn't finish any steps
if (all(df_learner_steps$last_completed_at == "")) {
# print("user didn't complete any step, (but started multiple)")
break
}
# if row index has 2 or more elements, then user finished at least one step
if (vector_length >= 2) {
# print("user finished one or more steps")
i = 0
temp_bool = TRUE
# while the last cell is empty, keep looping
while (temp_bool == TRUE) {
# if cell is empty, move one up
if (df_learner_steps$last_completed_at[row_index[length(row_index) -i]] == "") {
# print("last cell empty")
i = i+1
# if every row has been checked, move to the next user
if (i == length(row_index)){
# print("all cells checks, and no date available")
temp_bool = FALSE
}
# otherwise the last step has been identified
} else {
# print("last cell has date")
# save the date to variables
date_completed <- df_learner_steps$last_completed_at[row_index[length(row_index) -i]]
step_completed <- df_learner_steps$step[row_index[length(row_index) -i]]
# store the date and the step reached on the dr_learners
df_learners$completed_at[n] <- date_completed
df_learners$step[n] <- step_completed
temp_bool = FALSE
}
}
}
}
}
print("data frame missing")
# append the data frames
df_learner_steps <- rbind(cyber.security.1_step.activity,
cyber.security.2_step.activity,
cyber.security.3_step.activity,
cyber.security.4_step.activity,
cyber.security.5_step.activity,
cyber.security.6_step.activity,
cyber.security.7_step.activity)
# add the new columns
df_learners              <- df_learners_no_duplicates
df_learners$step         <- ""
df_learners$completed_at <- ""
for (n in 1:nrow(df_learners)) {
print(n)
# store a single user id
learner_id_char <- df_learners$learner_id[n]
# if the ID is in the data frame...
if (learner_id_char %in% df_learner_steps$learner_id) {
# Find the rows where the learner_id matches in df_learners, it will return a vector of all instances.
row_index <- which(df_learner_steps$learner_id == learner_id_char)
# store the length of the vector
vector_length <- length(row_index)
# if row index has 0 elements, then user isn't in the steps data frame
if (vector_length == 0) {
# print("no user")
}
# if row index has 1 element, then user didn't finish first step
if (vector_length == 1) {
# print("user didn't finish first step")
}
# if all the elements are empty, then they also didn't finish any steps
if (all(df_learner_steps$last_completed_at == "")) {
# print("user didn't complete any step, (but started multiple)")
break
}
# if row index has 2 or more elements, then user finished at least one step
if (vector_length >= 2) {
# print("user finished one or more steps")
i = 0
temp_bool = TRUE
# while the last cell is empty, keep looping
while (temp_bool == TRUE) {
# if cell is empty, move one up
if (df_learner_steps$last_completed_at[row_index[length(row_index) -i]] == "") {
# print("last cell empty")
i = i+1
# if every row has been checked, move to the next user
if (i == length(row_index)){
# print("all cells checks, and no date available")
temp_bool = FALSE
}
# otherwise the last step has been identified
} else {
# print("last cell has date")
# save the date to variables
date_completed <- df_learner_steps$last_completed_at[row_index[length(row_index) -i]]
step_completed <- df_learner_steps$step[row_index[length(row_index) -i]]
# store the date and the step reached on the dr_learners
df_learners$completed_at[n] <- date_completed
df_learners$step[n] <- step_completed
temp_bool = FALSE
}
}
}
}
}
print("data frame missing")
# append the data frames
df_learner_steps <- rbind(cyber.security.1_step.activity,
cyber.security.2_step.activity,
cyber.security.3_step.activity,
cyber.security.4_step.activity,
cyber.security.5_step.activity,
cyber.security.6_step.activity,
cyber.security.7_step.activity)
# add the new columns
df_learners              <- df_learners_no_duplicates
df_learners$step         <- ""
df_learners$completed_at <- ""
for (n in 1:nrow(df_learners)) {
# print(n)
# store a single user id
learner_id_char <- df_learners$learner_id[n]
# if the ID is in the data frame...
if (learner_id_char %in% df_learner_steps$learner_id) {
# Find the rows where the learner_id matches in df_learners, it will return a vector of all instances.
row_index <- which(df_learner_steps$learner_id == learner_id_char)
# store the length of the vector
vector_length <- length(row_index)
# if row index has 0 elements, then user isn't in the steps data frame
if (vector_length == 0) {
# print("no user")
}
# if row index has 1 element, then user didn't finish first step
if (vector_length == 1) {
# print("user didn't finish first step")
}
# if all the elements are empty, then they also didn't finish any steps
if (all(df_learner_steps$last_completed_at == "")) {
# print("user didn't complete any step, (but started multiple)")
break
}
# if row index has 2 or more elements, then user finished at least one step
if (vector_length >= 2) {
# print("user finished one or more steps")
i = 0
temp_bool = TRUE
# while the last cell is empty, keep looping
while (temp_bool == TRUE) {
# if cell is empty, move one up
if (df_learner_steps$last_completed_at[row_index[length(row_index) -i]] == "") {
# print("last cell empty")
i = i+1
# if every row has been checked, move to the next user
if (i == length(row_index)){
# print("all cells checks, and no date available")
temp_bool = FALSE
}
# otherwise the last step has been identified
} else {
# print("last cell has date")
# save the date to variables
date_completed <- df_learner_steps$last_completed_at[row_index[length(row_index) -i]]
step_completed <- df_learner_steps$step[row_index[length(row_index) -i]]
# store the date and the step reached on the dr_learners
df_learners$completed_at[n] <- date_completed
df_learners$step[n] <- step_completed
temp_bool = FALSE
}
}
}
}
}
temp_df = subset(df_learners, step!="")
View(df_countries_completed)
df_countries_completed <- subset(df_learners, step != "")
df_countries_completed <- subset(df_learners, step != "")
# create frequency table
country_count <- table(df_countries_completed$detected_country)
# convert to data frame
df_country_count <- as.data.frame(country_count)
# Rename the columns for clarity
colnames(df_country_count) <- c("country", "count")
df_country$completion_count = 0
df_country$completion_percent = 0
# get completion data from df_learners and add it to df_country
for (n in 1:nrow(df_country)) {
print(n)
country_name = as.character(df_country$country[n])
print(country_name)
df_subset <- subset(df_learners, df_learners$detected_country == country_name & step != "")
df_country$completion_count[n]   <- nrow(df_subset)
df_country$completion_percent[n] <- (df_country$completion_count[n] / df_country$count[n]) * 100
}
# Sort the data frame by the count in descending order
df_for_scattergraph <- df_country[order(df_country$completion_percent, decreasing = TRUE), ]
# keep only the top performing country
df_for_scattergraph <- head(df_for_scattergraph, n=20)
# change country code to name
df_for_scattergraph$country <- countrycode(sourcevar = df_for_scattergraph$country, origin = "iso2c", destination = "country.name")
scatter_plot <- ggplot(df_for_scattergraph, aes(x = completion_percent, y = count, color = country)) +
geom_point() +
labs(title = "Scatter plot of percentage of learners who completed the course vs. total learners from a country",
x = "percentage of learners who completed the course (%)",
y = "Total Leaners from country",
color = "Country")
(scatter_plot)
# Sort the data frame by the count in descending order
df_for_scattergraph <- df_country[order(df_country$completion_percent, decreasing = TRUE), ]
# keep only the top performing country
# df_for_scattergraph <- head(df_for_scattergraph, n=20)
# change country code to name
df_for_scattergraph$country <- countrycode(sourcevar = df_for_scattergraph$country, origin = "iso2c", destination = "country.name")
scatter_plot <- ggplot(df_for_scattergraph, aes(x = completion_percent, y = count, color = country)) +
geom_point() +
labs(title = "Scatter plot of percentage of learners who completed the course vs. total learners from a country",
x = "percentage of learners who completed the course (%)",
y = "Total Leaners from country",
color = "Country")
(scatter_plot)
scatter_plot <- ggplot(df_for_scattergraph, aes(x = completion_percent, y = count, color = country)) +
geom_point() +
labs(title = "Scatter plot of percentage of learners who completed the course vs. total learners from a country",
x = "percentage of learners who completed the course (%)",
y = "Total Leaners from country",
color = "Country")
guides(color = FALSE)
(scatter_plot)
scatter_plot <- ggplot(df_for_scattergraph, aes(x = completion_percent, y = count,)) +
geom_point() +
labs(title = "Scatter plot of percentage of learners who completed the course vs. total learners from a country",
x = "percentage of learners who completed the course (%)",
y = "Total Leaners from country",
color = "Country")
guides(color = FALSE)
(scatter_plot)
view(df_for_scattergraph)
## INPUT: df_learners (02-A.R)
##        df_country  (barchart_country_involvement.R)
## OUTPUT: graphs/BarChartofCompletion.png
library('ProjectTemplate')
load.project()
# install.packages("tidyverse")
library(tidyverse)
# install.packages("countrycode")
library(countrycode)
# Sort the data frame by the count in descending order
df_for_barchart <- df_country[order(df_country$completion_percent, decreasing = TRUE), ]
# keep only the top performing country
df_for_barchart <- head(df_for_barchart, n=20)
# change country code to name
df_for_barchart$country <- countrycode(sourcevar = df_for_barchart$country, origin = "iso2c", destination = "country.name")
# Create the bar chart
barchart <- ggplot(df_for_barchart, aes(x = reorder(country, -completion_percent), y = completion_percent)) +
geom_bar(stat = "identity", fill = "blue") +
labs(
title = "Bar Chart of Completion Percentage by Country",
x = "Country",
y = "Completion Percent"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggsave("H:/Documents/FutureLearn/graphs/BarChartofCompletion.png", plot = barchart, width = 6, height = 4, dpi = 300)
