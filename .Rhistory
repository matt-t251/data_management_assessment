z = x + y
z
source("C:/Users/c3074667/OneDrive - Newcastle University/Data Management/test R script.R")
source("C:/Users/c3074667/OneDrive - Newcastle University/Data Management/test R script.R")
z
ls()
rm(x)
x
x=5
x
rm(x)
x
rm(list=ls())
z=3
z
is.interger(z)
is.integer(z)
as.integer(z)
is.integer(z)
z=as.integer(z)
is.integer(z)
z=as.character(z)
is.integer(z)
is.character(z)
z=as.integer(z)
is.character(z)
z=as.integer(z)
is.integer(z)
word_1="hello"
word_2=" world"
word_2="world"
word_3=cat(word_1,word_2, sep=" ")
x=10
y=11
z=12
(d=x^2 + y^2 + z^2)
c(3,"Y",TRUE)
x = > c(3,"Y",TRUE)
x = c(3,"Y",TRUE)
x
is.double(x[1])
is.logical(x[3])
x[1]
x[1] = as.double(x[1])
x[1]
z = as.double(x[1])
pi:6
6:pi
x=seq(-4,4,legth.out(5))
x=seq(-4,4,legth.out=5)
x=seq(-4,4,length.out=5)
x=seq(-4,10,length.out=6)
sum(x)
mean(x)
sort(x)
rev(x)
range(x)
x=5:9
x[x > 7]
x=c(2,6,-4,2,6,7,8)
which(x==6)
matrix(seq(1,50),nrow=5,ncol=10,byrow=TRUE)
matrix(seq(1,50),nrow=5,ncol=10,byrow=TRUE)
A = matrix(seq(1,50),nrow=5,ncol=10,byrow=TRUE)
sum(A)
average(A)
mean(A)
mean(A[5,])
B=A
A*B
A*B
A/B
A-B
A-2
install.packages("ProjectTemplate")
library("ProjectTemplate")
create.project("cashflow_analysis")
create.project("cashflow_analysis")
create.project("cashflow_analysis")
# create a dataframe of learners, their ID, country, and detected country from all years
appended_dataframe <- rbind(cyber.security.1_enrolments,
cyber.security.2_enrolments,
cyber.security.3_enrolments,
cyber.security.4_enrolments,
cyber.security.5_enrolments,
cyber.security.6_enrolments,
cyber.security.7_enrolments)
# organisation_admin removed
admin_removed <- subset(appended_dataframe, role != "organisation_admin")
# remove access columns
columns_to_keep <- c("learner_id", "enrolled_at", "role", "country", "detected_country")
df_learners <- subset(admin_removed, select = columns_to_keep)
setwd("~/Documents/FutureLearn")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir= normalizePath('..'))
library(ProjectTemplate)
load.project()
library(ProjectTemplate)
load.project()
library(ProjectTemplate)
load.project()
df_learners
library(ProjectTemplate)
load.project()
df_learners <- subset(admin_removed, select = columns_to_keep)
View(df_learners)
df_learners_no_dupe = df_learners[!duplicated(df_learners),]
df_learners_no_duplicates <- df_learners[!duplicated(df_learners$learner_id), ]
for (dataset in project.info$data)
{
message(paste('Showing top 5 rows of', dataset))
print(head(get(dataset)))
}
View(project.info)
table(df_learners_no_duplicates$detected_country)
barplot(df_learners_no_duplicates$detected_country)
barplot(table(df_learners_no_duplicates$detected_country))
list?
?list
help(list)
(country = c(df_learners_no_duplicates$detected_country))
(country = c(df_learners[!duplicated(df_learners_no_duplicates$detected_country), ]))
(country = c(df_learners_no_duplicates[!duplicated(df_learners_no_duplicates$detected_country), ]))
View(country)
View(country)
barplot(head(table(df_learners_no_duplicates$detected_country)))
help(head)
barplot(head(table(df_learners_no_duplicates$detected_country)),n=10)
barplot(head(table(df_learners_no_duplicates$detected_country),n=10))
help(order)
(country = c(df_learners_no_duplicates$detected_country))
barplot(country)
(country = c(df_learners_no_duplicates$detected_country))
barplot(country)
barplot(c(df_learners_no_duplicates$detected_country)))
barplot(c(df_learners_no_duplicates$detected_country))
barplot(table(country))
barplot(order(table(country)))
sorted_table <- country[order(country[,2], decreasing = TRUE), ]
sorted_country <- country[order(country, decreasing = TRUE)]
barplot(table(sorted_country), col = "blue", main = "Bar Chart of Countries in Descending Order")
# Example vector (replace this with your actual data)
country <- c("USA", "Canada", "Australia", "UK", "Germany", "France", "Japan")
# Sort the vector in descending order
sorted_country <- country[order(country, decreasing = TRUE)]
# Create a bar chart
barplot(table(sorted_country), col = "blue", main = "Bar Chart of Countries in Descending Order")
# Example vector (replace this with your actual data)
country <- c("USA","USA", "Canada", "Australia", "UK", "Germany", "France", "Japan")
# Sort the vector in descending order
sorted_country <- country[order(country, decreasing = TRUE)]
# Create a bar chart
barplot(table(sorted_country), col = "blue", main = "Bar Chart of Countries in Descending Order")
# Example vector (replace this with your actual data)
country <- c("USA", "Canada", "Canada", "Australia", "UK", "Germany", "France", "Japan")
# Sort the vector in descending order
sorted_country <- country[order(country, decreasing = TRUE)]
# Create a bar chart
barplot(table(sorted_country), col = "blue", main = "Bar Chart of Countries in Descending Order")
country = c(df_learners_no_duplicates$detected_country)
my_table = table(country)
my_table <- table(country)
(my_table <- table(country))
(country = c(df_learners_no_duplicates[!duplicated(df_learners_no_duplicates$detected_country), ]))
barplot(head(table(df_learners_no_duplicates$detected_country),n=10))
barplot(order(table(country)))
country = c(df_learners_no_duplicates$detected_country)
(my_table <- table(country))
sorted_index <- order(my_table$[,2])
sorted_table <- my_table[sorted_index, ]
# Display the sorted table
print(sorted_table)
sorted_index <- order(my_table[,2])
sorted_table <- my_table[sorted_index, ]
# Display the sorted table
print(sorted_table)
sorted_index <- order(my_table[,2])
sorted_table <- my_table[sorted_index, ]
# Display the sorted table
print(sorted_table)
sorted_index <- order(my_table[2,])
sorted_table <- my_table[sorted_index, ]
# Display the sorted table
print(sorted_table)
sorted_index <- order(my_table[2,])
sorted_table <- my_table[sorted_index, ]
# Display the sorted table
print(sorted_table)
df_countries <- subset(df_learners_no_duplicates, select = c("detected_country"))
View(df_countries)
View(df_learners_no_duplicates)
# Example data frame (replace this with your actual data frame)
df_countries <- data.frame(
Country = c("USA", "Canada", "USA", "UK", "Canada", "Germany", "USA", "Germany", "France")
)
# Use the table() function to create a frequency table
country_counts <- table(df_countries$Country)
# Convert the frequency table to a data frame
country_counts_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_counts_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
sorted_country_counts_df <- country_counts_df[order(country_counts_df$Count, decreasing = TRUE), ]
# Display the sorted data frame
print(sorted_country_counts_df)
barplot(sorted_country_counts_df)
barplot(table(sorted_country_counts_df))
df_countries <- data.frame(
Country = c("USA", "Canada", "USA", "UK", "Canada", "Germany", "USA", "Germany", "France")
)
# Use the table() function to create a frequency table
country_counts <- table(df_countries$Country)
# Convert the frequency table to a data frame
country_counts_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_counts_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
sorted_country_counts_df <- country_counts_df[order(country_counts_df$Count, decreasing = TRUE), ]
# Display the sorted data frame
print(sorted_country_counts_df)
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
#make a dataframe of countries
df_countries <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(df_countries$detected_country)
# Convert the frequency table to a data frame
country_counts_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_counts_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
sorted_country_counts_df <- country_counts_df[order(country_counts_df$Count, decreasing = TRUE), ]
# Display the sorted data frame
print(sorted_country_counts_df)
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
#make a dataframe of countries
df_countries <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(df_countries$detected_country)
# Convert the frequency table to a data frame
country_counts_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_counts_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
sorted_country_counts_df <- country_counts_df[order(country_counts_df$Count, decreasing = TRUE), ]
sorted_country_counts_df = head(sorted_country_counts_df, n=10)
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
#make a dataframe of countries
df_countries <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(df_countries$detected_country)
# Convert the frequency table to a data frame
country_counts_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_counts_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
sorted_country_counts_df <- country_counts_df[order(country_counts_df$Count, decreasing = TRUE), ]
# remove --
sorted_country_counts_df = subset(sorted_country_counts_df, Country != "--")
# keep only the top 10
sorted_country_counts_df = head(sorted_country_counts_df, n=10)
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
install.packages("countrycode")
library(countrycode)
#make a dataframe of countries
df_countries <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(df_countries$detected_country)
# Convert the frequency table to a data frame
country_counts_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_counts_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
sorted_country_counts_df <- country_counts_df[order(country_counts_df$Count, decreasing = TRUE), ]
# remove --
sorted_country_counts_df = subset(sorted_country_counts_df, Country != "--")
# keep only the top 10
sorted_country_counts_df = head(sorted_country_counts_df, n=10)
# change country code to name
sorted_country_counts_df <- countrycode(sourcevar = sorted_country_counts_df, origin = "iso2c", destination = "country_name")
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
sorted_country_counts_df = countrycode(sourcevar = sorted_country_counts_df, origin = "iso2c", destination = "country_name")
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
# change country code to name
sorted_country_counts_df = countrycode(sourcevar = sorted_country_counts_df[,2], origin = "iso2c", destination = "country_name")
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
# Example vector of country codes
country_codes <- c("US", "CA", "DE", "FR")
# Use the 'countrycode' function to convert country codes to full names
country_names <- countrycode(sourcevar = country_codes, origin = "iso2c", destination = "country_name")
# Display the resulting vector of country names
print(country_names)
library(countrycode)
# Example vector of country codes
country_codes <- c("US", "CA", "DE", "FR")
# Use the 'countrycode' function to convert country codes to full names
country_names <- countrycode(sourcevar = country_codes, origin = "iso2c", destination = "country.name")
# Display the resulting vector of country names
print(country_names)
# change country code to name
sorted_country_counts_df = countrycode(sourcevar = sorted_country_counts_df[,2], origin = "iso2c", destination = "country_name")
sorted_country_counts_df <- countrycode(sourcevar = sorted_country_counts_df, origin = "iso2c", destination = "country.name")
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
# change country code to name
#sorted_country_counts_df = countrycode(sourcevar = sorted_country_counts_df[,2], origin = "iso2c", destination = "country_name")
sorted_country_counts_df <- countrycode(sourcevar = sorted_country_counts_df, origin = "iso2c", destination = "country.name")
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
View(df_countries)
# change country code to name
sorted_country_counts_df = countrycode(sourcevar = sorted_country_counts_df[,1], origin = "iso2c", destination = "country_name")
#sorted_country_counts_df <- countrycode(sourcevar = sorted_country_counts_df, origin = "iso2c", destination = "country.name")
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
#make a dataframe of countries
df_countries <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(df_countries$detected_country)
# Convert the frequency table to a data frame
country_counts_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_counts_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
sorted_country_counts_df <- country_counts_df[order(country_counts_df$Count, decreasing = TRUE), ]
# remove --
sorted_country_counts_df = subset(sorted_country_counts_df, Country != "--")
# keep only the top 10
sorted_country_counts_df = head(sorted_country_counts_df, n=10)
# change country code to name
sorted_country_counts_df = countrycode(sourcevar = sorted_country_counts_df, origin = "iso2c", destination = "country_name")
#sorted_country_counts_df <- countrycode(sourcevar = sorted_country_counts_df, origin = "iso2c", destination = "country.name")
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
#make a dataframe of countries
df_countries <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(df_countries$detected_country)
# Convert the frequency table to a data frame
country_counts_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_counts_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
sorted_country_counts_df <- country_counts_df[order(country_counts_df$Count, decreasing = TRUE), ]
# remove --
sorted_country_counts_df = subset(sorted_country_counts_df, Country != "--")
# keep only the top 10
sorted_country_counts_df = head(sorted_country_counts_df, n=10)
# change country code to name
sorted_country_counts_df = countrycode(sourcevar = sorted_country_counts_df$detected_country, origin = "iso2c", destination = "country_name")
#sorted_country_counts_df <- countrycode(sourcevar = sorted_country_counts_df, origin = "iso2c", destination = "country.name")
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
# change country code to name
sorted_country_counts_df = countrycode(sourcevar = sorted_country_counts_df$"detected_country", origin = "iso2c", destination = "country_name")
#sorted_country_counts_df <- countrycode(sourcevar = sorted_country_counts_df, origin = "iso2c", destination = "country.name")
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
# change country code to name
sorted_country_counts_df = countrycode(sourcevar = sorted_country_counts_df$"detected_country", origin = "iso2c", destination = "country_name")
#sorted_country_counts_df <- countrycode(sourcevar = sorted_country_counts_df, origin = "iso2c", destination = "country.name")
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
#make a dataframe of countries
df_countries <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(df_countries$detected_country)
# Convert the frequency table to a data frame
country_counts_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_counts_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
sorted_country_counts_df <- country_counts_df[order(country_counts_df$Count, decreasing = TRUE), ]
# remove --
sorted_country_counts_df = subset(sorted_country_counts_df, Country != "--")
# keep only the top 10
sorted_country_counts_df = head(sorted_country_counts_df, n=10)
# change country code to name
sorted_country_counts_df = countrycode(sourcevar = sorted_country_counts_df$"detected_country", origin = "iso2c", destination = "country_name")
#sorted_country_counts_df <- countrycode(sourcevar = sorted_country_counts_df, origin = "iso2c", destination = "country.name")
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
library(countrycode)
# Example vector of country codes
country_codes <- c("US", "CA", "DE", "FR")
# Use the 'countrycode' function to convert country codes to full names
country_names <- countrycode(sourcevar = country_codes, origin = "iso2c", destination = "country.name")
# Display the resulting vector of country names
print(country_names)
View(sorted_country_counts_df)
#make a dataframe of countries
df_countries <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(df_countries$detected_country)
# Convert the frequency table to a data frame
country_counts_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_counts_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
sorted_country_counts_df <- country_counts_df[order(country_counts_df$Count, decreasing = TRUE), ]
View(sorted_country_counts_df)
#make a dataframe of countries
country_df <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(country_df$detected_country)
# Convert the frequency table to a data frame
country_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
country_df <- country_df[order(country_df$Count, decreasing = TRUE), ]
# remove -- (there are 873 --)
country_df = subset(country_df, Country != "--")
# keep only the top 10
country_df = head(country_df, n=10)
# Create a bar plot
barplot(sorted_country_counts_df$Count, names.arg = sorted_country_counts_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
#make a dataframe of countries
country_df <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(country_df$detected_country)
# Convert the frequency table to a data frame
country_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
country_df <- country_df[order(country_df$Count, decreasing = TRUE), ]
# remove -- (there are 873 --)
country_df = subset(country_df, Country != "--")
# keep only the top 10
country_df = head(country_df, n=10)
# Create a bar plot
barplot(country_df$Count, names.arg = country_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
View(country_df)
country_df$CountryName <- countrycode(sourcevar = country_df$Country, origin = "iso2c", destination = "country.name")
View(country_df)
#make a dataframe of countries
country_df <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(country_df$detected_country)
# Convert the frequency table to a data frame
country_df <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(country_df) <- c("Country", "Count")
# Sort the data frame by the count in descending order
country_df <- country_df[order(country_df$Count, decreasing = TRUE), ]
# remove -- (there are 873 --)
country_df = subset(country_df, Country != "--")
# keep only the top 10
country_df = head(country_df, n=10)
# change country code to name
# Assuming your data frame 'country_df' looks like this
# Replace with your actual data frame
# country_df <- data.frame(CountryCode = c("US", "CA", "DE", "FR"), Value = c(100, 200, 150, 50))
# Use the 'countrycode' function to convert country codes to full names
country_df$Country <- countrycode(sourcevar = country_df$Country, origin = "iso2c", destination = "country.name")
# Display the updated data frame
print(country_df)
# Create a bar plot
barplot(country_df$Count, names.arg = country_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
View(country_df)
barplot(country_df$Count, names.arg = country_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count")
ylim = c(0, 11000))
barplot(country_df$Count, names.arg = country_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count"
ylim = c(0, 11000))
barplot(country_df$Count, names.arg = country_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count",
ylim = c(0, 11000))
barplot(country_df$Count, names.arg = country_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count",
ylim = c(0, 12000))
# Example code for creating the bar plot with rotated x-axis labels
barplot(country_df$Count, names.arg = country_df$Country, col = "blue",
main = "Bar Plot of Country Counts", xlab = "Country", ylab = "Count",
ylim = c(0, 12000), las = 2)
chooseCRANmirror()
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
install.packages("tidyverse")
install.packages("tidyverse")
