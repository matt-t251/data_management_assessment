9*9
sin(pi/2)
help(abs)
x=3
y=x+3
y
x=x+y
x
is.double(x)
z=1.1
is.double(z)
x = "Orange"
is.double(x)
is.character(x)
x = FALSE
is.logical(x)
x = 0/0
x
4/0
-4/0
c(1,2,3,4,5,6)
c("zebra", "dog", "apple")
a=c("zebra", "dog", "apple")
length(a)
1:6
seq(10,13, by = .5)
seq(2,7, length.out = 4)
x = seq(-10,10,by=2)
x*2
x+2
x*x
x/x
x = seq(-10,10,by=2)
x*2
x+2
x*x
x/x
x = seq(-10,10,by=2)
x
x*2
x+2
x*x
x/x
x = seq(-10,10,by=10)
x
x=5:9
x[2]
x[2:3]
x[0]
x[1]
x[x > 7]
x=x[x > 7]
x=x[x > 8]
is.double(x)
is.vector(x)
A = matrix(c(1,2,3,4,5,6), nrow=2, ncol=3, byrow = TRUE)
A
A = matrix(c(1,2,3,4,5,6), nrow=2, ncol=3, byrow = FALSE)
A
A[1,]
A[,1]
A[2,3]
help(base)
?acos
help(help)
2*2
1/(1+ln(2))
log(2)
1/(1+log(2))
4!
exp(4)
e
exp(1)
exp(10)
round(exp(10), digits=0)
cos(pi)
help(base)
help(cos)
acos(0.5)
log(0)
log(0, 10)
(x=9)
z = x + y
z = x + y
z
z
z
z
x = 2
y = 2
z = x + y
z
x = 2
y = 2
z = x + y
z
x = 2
y = 2
z = x + y
z
source("C:/Users/c3074667/OneDrive - Newcastle University/Data Management/test R script.R")
source("C:/Users/c3074667/OneDrive - Newcastle University/Data Management/test R script.R")
z
ls()
rm(x)
x
x=5
x
rm(x)
x
rm(list=ls())
z=3
z
is.interger(z)
is.integer(z)
as.integer(z)
is.integer(z)
z=as.integer(z)
is.integer(z)
z=as.character(z)
is.integer(z)
is.character(z)
z=as.integer(z)
is.character(z)
z=as.integer(z)
is.integer(z)
word_1="hello"
word_2=" world"
word_2="world"
word_3=cat(word_1,word_2, sep=" ")
x=10
y=11
z=12
(d=x^2 + y^2 + z^2)
c(3,"Y",TRUE)
x = > c(3,"Y",TRUE)
x = c(3,"Y",TRUE)
x
is.double(x[1])
is.logical(x[3])
x[1]
x[1] = as.double(x[1])
x[1]
z = as.double(x[1])
pi:6
6:pi
x=seq(-4,4,legth.out(5))
x=seq(-4,4,legth.out=5)
x=seq(-4,4,length.out=5)
x=seq(-4,10,length.out=6)
sum(x)
mean(x)
sort(x)
rev(x)
range(x)
x=5:9
x[x > 7]
x=c(2,6,-4,2,6,7,8)
which(x==6)
matrix(seq(1,50),nrow=5,ncol=10,byrow=TRUE)
matrix(seq(1,50),nrow=5,ncol=10,byrow=TRUE)
A = matrix(seq(1,50),nrow=5,ncol=10,byrow=TRUE)
sum(A)
average(A)
mean(A)
mean(A[5,])
B=A
A*B
A*B
A/B
A-B
A-2
install.packages("ProjectTemplate")
library("ProjectTemplate")
create.project("cashflow_analysis")
create.project("cashflow_analysis")
create.project("cashflow_analysis")
setwd("~/Documents/FutureLearn")
library(ProjectTemplate)
load.project()
## INPUT: df_learners_no_duplicates (01-A.R)
## OUTPUT: graphs/BarChartofCountries.png
# install.packages("tidyverse")
library(tidyverse)
# install.packages("countrycode")
library(countrycode)
#make a data frame of countries
df_country <- subset(df_learners_no_duplicates, select = c("detected_country"))
# Use the table() function to create a frequency table
country_counts <- table(df_country$detected_country)
# Convert the frequency table to a data frame
df_country <- as.data.frame(country_counts)
# Rename the columns for clarity
colnames(df_country) <- c("country", "count")
# remove -- (there are 873 --)
df_country <- subset(df_country, country != "--")
# Sort the data frame by the count in descending order
df_country <- df_country[order(df_country$count, decreasing = TRUE), ]
View(df_country)
library(sf)
library(dplyr)
library(ggplot2)
library(giscoR)
# Year
year_ref <- 2016
# Data
nuts2 <- gisco_get_nuts(year = year_ref, resolution = 20, nuts_level = 2) %>%
select(NUTS_ID, NAME_LATN)
# Transform the shape
nuts2_3035 <- st_transform(nuts2, 3035)
# Filter to select data from 2016
disp_income <- giscoR::tgs00026 %>%
filter(time == year_ref) %>%
select(-time)
# Join map and data
nuts2_3035_data <- nuts2_3035 %>%
left_join(disp_income, by = c("NUTS_ID" = "geo"))
# Basic choropleth map
ggplot(nuts2_3035_data) +
geom_sf(aes(fill = values), color = "white", linetype = 1, lwd = 0.25) +
xlim(c(2200000, 7150000)) +
ylim(c(1380000, 5500000)) +
labs(title = paste0("Disposable income of private households in Europe (", year_ref, ")"),
fill = "Euro per inhabitant") +
scale_fill_viridis_c(option = "plasma", direction = -1) +
gisco_scalebar() +
theme_minimal() +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5))
View(nuts2_3035_data)
df <- df_learners_no_duplicates
df <- subset(df , country != detected_country)
df <- subset(df , detected_country != "--")
df <- subset(df , country != "Unknown")
incorrct_country = nrow(df)
df <- df_learners_no_duplicates
df <- subset(df , detected_country == "--")
country_not_detected = nrow(df)
# how many learners country was detected
df <- df_learners_no_duplicates
df <- subset(df , detected_country != "--")
country_detected = nrow(df)
View(df)
View(df_learners_no_duplicates)
# how many learners reported their country
df <- df_learners_no_duplicates
df <- subset(df , country != "Unknown")
country_reported = nrow(df)
# how many learners detected and reported country are the same.
df <- df_learners_no_duplicates
df <- subset(df , country == detected_country)
corrct_country = nrow(df)
# how many learners detected and reported country are the same.
df <- df_learners_no_duplicates
df <- subset(df , country == detected_country)
correct_country = nrow(df)
# 3726
# create a dataframe of learners, their ID, country, and detected country from all years
appended_dataframe <- rbind(cyber.security.1_enrolments,
cyber.security.2_enrolments,
cyber.security.3_enrolments,
cyber.security.4_enrolments,
cyber.security.5_enrolments,
cyber.security.6_enrolments,
cyber.security.7_enrolments)
# organisation_admin removed
df_admin_removed <- subset(appended_dataframe, role != "organisation_admin")
# remove excess columns
# columns_to_keep <- c("learner_id", "enrolled_at", "role", "country", "detected_country")
# df_admin_removed <- subset(df_admin_removed, select = columns_to_keep) # 37257
#remove duplicate learners across entire data frame
df_learners_no_duplicates <- df_admin_removed[!duplicated(df_admin_removed$learner_id), ] #2052
df <- df_learners_no_duplicates
df <- subset(df , gender != "Unknown")
reported_gender = nrow(df)
df <- df_learners_no_duplicates
df <- subset(df , country != "Unknown")
reported_gender = nrow(df)
df <- df_learners_no_duplicates
df <- subset(df , gender != "Unknown")
reported_gender = nrow(df)
# 3733
# country
df <- df_learners_no_duplicates
df <- subset(df , country != "Unknown")
reported_country = nrow(df)
# age range
df <- df_learners_no_duplicates
df <- subset(df , age_range != "Unknown")
reported_age = nrow(df)
# 3733
df <- df_learners_no_duplicates
df <- subset(df , highest_education_level != "Unknown")
reported_education = nrow(df)
# 3733
df <- df_learners_no_duplicates
df <- subset(df , employment_status != "Unknown")
reported_employment = nrow(df)
# Employment area
df <- df_learners_no_duplicates
df <- subset(df , employment_area != "Unknown")
reported_job = nrow(df)
# 3733
